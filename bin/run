#!/usr/bin/env node --trace-warnings
/* eslint-disable promise/prefer-await-to-then,promise/prefer-await-to-callbacks,eslint-comments/disable-enable-pair */
const { argv } = require('process')

const updateNotifier = require('update-notifier')

const { createAddonsCommand } = require('../src/commands/addons')
const { createApiCommand } = require('../src/commands/api')
const { BaseCommand } = require('../src/commands/base-command')
const { createBuildCommand } = require('../src/commands/build')
const { createCompletionCommand } = require('../src/commands/completion')
const { createDeployCommand } = require('../src/commands/deploy')
const { createDevCommand } = require('../src/commands/dev')
const { createEnvCommand } = require('../src/commands/env')
const { createFunctionsCommand } = require('../src/commands/functions')
const { createInitCommand } = require('../src/commands/init')
const { createLinkCommand } = require('../src/commands/link')
const { createLmCommand } = require('../src/commands/lm')
const { createLoginCommand } = require('../src/commands/login')
const { createLogoutCommand } = require('../src/commands/logout')
const { createOpenCommand } = require('../src/commands/open')
const { createPluginsCommand } = require('../src/commands/plugins')
const { createSitesCommand } = require('../src/commands/sites')
const { createStatusCommand } = require('../src/commands/status')
const { createSwitchCommand } = require('../src/commands/switch')
const { createUnlinkCommand } = require('../src/commands/unlink')
const { createWatchCommand } = require('../src/commands/watch')
const { USER_AGENT, exit } = require('../src/utils')

// 12 hours
const UPDATE_CHECK_INTERVAL = 432e5

if (require.main === module) {
  // eslint-disable-next-line node/global-require
  const pkg = require('../package.json')

  try {
    updateNotifier({
      pkg,
      updateCheckInterval: UPDATE_CHECK_INTERVAL,
    }).notify()
  } catch (error) {
    console.log('Error checking for updates:')
    console.log(error)
  }

  const program = new BaseCommand('netlify-cli')
  program.version(USER_AGENT)

  program.configureHelp({
    // TODO: Add custom formater to have same visual styling
    //   formatHelp: (cmd, helper) => {
    //     console.log(cmd, helper);
    //     const longestFlag = Math.max(...cmd.options.map((option) => option.flags.length)) + 1;
    //     const table = cmd.options.map(({flags, description}) => `  ${flags}${new Array(longestFlag-flags.length).fill().join(' ')}   {grey ${description}} `).join('\n')
    //     return chalk`{bold OPTIONS}
    // ${table}
    // `
    //   }
  })

  createAddonsCommand(program)
  createApiCommand(program)
  createBuildCommand(program)
  createCompletionCommand(program)
  createDeployCommand(program)
  createDevCommand(program)
  createEnvCommand(program)
  createFunctionsCommand(program)
  createInitCommand(program)
  createLinkCommand(program)
  createLmCommand(program)
  createLoginCommand(program)
  createLogoutCommand(program)
  createOpenCommand(program)
  createPluginsCommand(program)
  createSitesCommand(program)
  createStatusCommand(program)
  createSwitchCommand(program)
  createUnlinkCommand(program)
  createWatchCommand(program)

  program
    .showSuggestionAfterError()
    .parseAsync(argv)
    .then(() => exit(0))
    .catch((error) => program.onEnd(error))
    .catch((error) => {
      console.error(error)
      exit(1)
    })
}
